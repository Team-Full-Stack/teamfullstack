<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://blog.teamfullstack.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://blog.teamfullstack.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2024-09-30T19:37:07+00:00</updated><id>https://blog.teamfullstack.io//feed.xml</id><title type="html">Team Full Stack</title><subtitle>Works of a small yet reliable dev team. </subtitle><entry><title type="html">Integrating MinIO with .NET Applications</title><link href="https://blog.teamfullstack.io//blog/2024/minio-dotnet/" rel="alternate" type="text/html" title="Integrating MinIO with .NET Applications"/><published>2024-09-30T00:00:00+00:00</published><updated>2024-09-30T00:00:00+00:00</updated><id>https://blog.teamfullstack.io//blog/2024/minio-dotnet</id><content type="html" xml:base="https://blog.teamfullstack.io//blog/2024/minio-dotnet/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>MinIO is a high-performance, S3-compatible object storage service that is perfect for cloud-native applications. In this guide, we will explore how to integrate MinIO with .NET applications, providing you with the ability to create, delete, and manage buckets and files seamlessly.</p> <h2 id="setting-up-minio">Setting Up MinIO</h2> <p>Before diving into code, ensure that you have MinIO installed and running. You can use the following Dockerfile to set up MinIO with a client for managing buckets and policies:</p> <h3 id="dockerfile">Dockerfile</h3> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Use the official MinIO image</span>
<span class="k">FROM</span><span class="s"> minio/minio:latest</span>

<span class="c"># Set the MinIO data directory (this is where your data will be stored)</span>
<span class="k">ENV</span><span class="s"> MINIO_VOLUMES="/data"</span>

<span class="c"># Set MinIO access and secret keys</span>
<span class="k">ENV</span><span class="s"> MINIO_ROOT_USER=&lt;your-access-key&gt; \</span>
    MINIO_ROOT_PASSWORD=&lt;your-secret-key&gt;

# Expose MinIO API (default port 9000) and console (port 9001)
<span class="k">EXPOSE</span><span class="s"> 9000 9001</span>

<span class="c"># Download MinIO Client (mc) for managing buckets and policies using curl</span>
<span class="k">RUN </span>curl <span class="nt">-O</span> https://dl.min.io/client/mc/release/linux-amd64/mc <span class="se">\
</span>    <span class="o">&amp;&amp;</span> <span class="nb">chmod</span> +x mc <span class="se">\
</span>    <span class="o">&amp;&amp;</span> <span class="nb">mv </span>mc /usr/local/bin/

<span class="c"># Copy the script to create buckets and set policies</span>
<span class="k">COPY</span><span class="s"> create-buckets.sh /usr/local/bin/create-buckets.sh</span>
<span class="k">RUN </span><span class="nb">chmod</span> +x /usr/local/bin/create-buckets.sh

<span class="c"># Use bash to handle the script execution</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["bash", "-c", "/usr/local/bin/create-buckets.sh &amp; minio server /data --console-address :9001"]</span>
</code></pre></div></div> <h3 id="docker-composeyml">docker-compose.yml</h3> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code>version: '3.8'

services:
minio:
build:
context: .
dockerfile: Dockerfile
ports:
- "9000:9000"      # MinIO API
- "9001:9001"      # MinIO Console
environment:
MINIO_ROOT_USER: &lt;your-access-key&gt;
MINIO_ROOT_PASSWORD: &lt;your-secret-key&gt;
volumes:
      - minio-data:/data  <span class="c"># Persistent data storage</span>

volumes:
  minio-data:
</code></pre></div></div> <h3 id="command-for">Command for</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up <span class="nt">--build</span>
</code></pre></div></div> <p>For the complete code and implementation, you can visit the public repository: <a href="https://github.com/Luqmant51/MinioServerConsoleApp">MinioServerConsoleApp</a>.</p>]]></content><author><name>Usman Jamil Bhatti</name></author><category term="MinIO,"/><category term=".NET,"/><category term="Object"/><category term="Storage"/><summary type="html"><![CDATA[A guide to using MinIO as an object storage solution in .NET applications.]]></summary></entry><entry><title type="html">Automating Go-Releaser with GCP Cloud Build for Artifact Storage</title><link href="https://blog.teamfullstack.io//blog/2024/Gcp-Go-Releaser/" rel="alternate" type="text/html" title="Automating Go-Releaser with GCP Cloud Build for Artifact Storage"/><published>2024-09-09T00:00:00+00:00</published><updated>2024-09-09T00:00:00+00:00</updated><id>https://blog.teamfullstack.io//blog/2024/Gcp-Go-Releaser</id><content type="html" xml:base="https://blog.teamfullstack.io//blog/2024/Gcp-Go-Releaser/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Continuous integration and continuous delivery (CI/CD) are crucial for modern software development, and automating these processes can save significant time and reduce errors. In this guide, we’ll walk through the steps to run Go-Releaser within Google Cloud Platform (GCP) Cloud Build and upload the generated artifacts into Google Cloud Storage (GCS). Each release version will be organized into its own folder in GCS, making it easy to manage and retrieve specific versions of your software.</p> <h2 id="prerequisites">Prerequisites</h2> <p>Before we get started, ensure you have the following prerequisites in place:</p> <ul> <li><strong>Google Cloud Platform Account</strong>: You need access to a GCP project with billing enabled.</li> <li><strong>Go-Releaser</strong>: Installed on your local machine for initial setup and testing.</li> <li><strong>Google Cloud SDK</strong>: Installed and configured on your machine.</li> <li><strong>Cloud Build API</strong>: Enabled in your GCP project.</li> <li><strong>Google Cloud Storage Bucket</strong>: Created for storing the release artifacts.</li> </ul> <h2 id="setting-up-go-releaser-in-gcp-cloud-build">Setting Up Go-Releaser in GCP Cloud Build</h2> <h3 id="1-create-the-cloud-build-configuration">1. Create the Cloud Build Configuration</h3> <p>First, we’ll define a <code class="language-plaintext highlighter-rouge">cloudbuild.yaml</code> file to automate the build process using GCP Cloud Build. This file describes the steps needed to run Go-Releaser and upload the artifacts.</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">steps</span><span class="pi">:</span>
  <span class="c1"># Step 1: Set up Go environment with Go 1.23.0</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">golang:1.23.0'</span>
    <span class="na">id</span><span class="pi">:</span> <span class="s1">'</span><span class="s">setup-go'</span>
    <span class="na">entrypoint</span><span class="pi">:</span> <span class="s1">'</span><span class="s">bash'</span>
    <span class="na">args</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">-c'</span>
      <span class="pi">-</span> <span class="pi">|</span>
        <span class="s">go version</span>
        <span class="s">go mod download  # Download Go module dependencies</span>

  <span class="c1"># Step 2: Run GoReleaser using its Docker image</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">goreleaser/goreleaser:latest'</span>
    <span class="na">id</span><span class="pi">:</span> <span class="s1">'</span><span class="s">run-goreleaser'</span>
    <span class="na">entrypoint</span><span class="pi">:</span> <span class="s1">'</span><span class="s">bash'</span>
    <span class="na">args</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">-c'</span>
      <span class="pi">-</span> <span class="pi">|</span>
        <span class="s">goreleaser release --snapshot</span>
  <span class="c1"># Upload artifacts to Google Cloud Storage</span>
  <span class="pi">-</span> <span class="na">id</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Upload</span><span class="nv"> </span><span class="s">dist</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">storage"</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">gcr.io/google.com/cloudsdktool/cloud-sdk:slim'</span>
    <span class="na">automapSubstitutions</span><span class="pi">:</span> <span class="kc">true</span>
    <span class="na">script</span><span class="pi">:</span> <span class="pi">|</span>
      <span class="s">#!/usr/bin/env bash</span>
      <span class="s">if [ ! -z "$TAG_NAME" ]; then</span>
        <span class="s">gcloud storage cp --recursive ./dist/* gs://$Your_Bucket_Name/main/$TAG_NAME/</span>
      <span class="s">else</span>
        <span class="s">gcloud storage cp --recursive ./dist/* gs://$Your_Bucket_Name/main/dist/</span>
      <span class="s">fi</span>
<span class="na">options</span><span class="pi">:</span>
  <span class="na">logging</span><span class="pi">:</span> <span class="s">CLOUD_LOGGING_ONLY</span>

  <span class="na">pool</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">projects/$PROJECT_ID/locations/us-central1/workerPools/$Your_Private_Pool_Name'</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">Steps</code>: This block defines tasks that Cloud Build performs in sequence, from setting up the environment to uploading artifacts to GCS.</li> <li><code class="language-plaintext highlighter-rouge">Name</code>: Specifies the Docker image used in the build process. For example, <code class="language-plaintext highlighter-rouge">golang:1.23.0 pulls</code> a Go image, while <code class="language-plaintext highlighter-rouge">goreleaser/goreleaser:latest</code> pulls the GoReleaser image.</li> <li><code class="language-plaintext highlighter-rouge">Id</code>: Gives each step an optional identifier for logging or reference purposes.</li> <li><code class="language-plaintext highlighter-rouge">Entrypoint</code>: Specifies the default command that will run inside the container. In this example, it is set to <code class="language-plaintext highlighter-rouge">bash</code>.</li> <li><code class="language-plaintext highlighter-rouge">Args</code>: Contains the commands or shell script to execute. For example, <code class="language-plaintext highlighter-rouge">go mod download</code> downloads the Go dependencies, and <code class="language-plaintext highlighter-rouge">goreleaser release --snapshot</code> generates the release artifacts.</li> <li><code class="language-plaintext highlighter-rouge">AutomapSubstitutions</code>: Allows variable substitution, e.g., for dynamic bucket or branch names.</li> <li><code class="language-plaintext highlighter-rouge">Script</code>: Bash commands that run during the build step. For example, the <code class="language-plaintext highlighter-rouge">gcloud storage cp</code> command copies the build artifacts to a specified GCS bucket.</li> </ul> <h3 id="2-create-the-go-releaser-configuration">2. Create the Go Releaser Configuration</h3> <p>Create a <code class="language-plaintext highlighter-rouge">.goreleaser.yml</code> configuration file in your project root. This file tells Go-Releaser how to build and package your application.</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="m">2</span>
<span class="na">before</span><span class="pi">:</span>
  <span class="na">hooks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">go mod tidy</span>
<span class="na">builds</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">env</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">CGO_ENABLED=0</span>
    <span class="na">goos</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">linux</span>
      <span class="pi">-</span> <span class="s">windows</span>
      <span class="pi">-</span> <span class="s">darwin</span>
    <span class="na">goarch</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">amd64</span>
      <span class="pi">-</span> <span class="s">arm</span>
      <span class="pi">-</span> <span class="s">arm64</span>
<span class="na">release</span><span class="pi">:</span>
  <span class="na">disable</span><span class="pi">:</span> <span class="s">trueES</span>

<span class="na">archives</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">format</span><span class="pi">:</span> <span class="s">tar.gz</span>
    <span class="c1"># this name template makes the OS and Arch compatible with the results of `uname`.</span>
    <span class="na">name_template</span><span class="pi">:</span> <span class="pi">&gt;-</span>
      <span class="s">__x86_64i386v</span>
    <span class="c1"># use zip for windows archives</span>
    <span class="na">format_overrides</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">goos</span><span class="pi">:</span> <span class="s">windows</span>
        <span class="na">format</span><span class="pi">:</span> <span class="s">zip</span>
<span class="na">changelog</span><span class="pi">:</span>
  <span class="na">sort</span><span class="pi">:</span> <span class="s">asc</span>
  <span class="na">filters</span><span class="pi">:</span>
    <span class="na">exclude</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">^docs:"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">^test:"</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">Version</code>: The version of Go-Releaser configuration.</li> <li><code class="language-plaintext highlighter-rouge">Before.hooks</code>: Commands to run before the main build process begins. Here, go mod tidy ensures that the Go module dependencies are clean and up-to-date.</li> <li><code class="language-plaintext highlighter-rouge">Builds</code>: Defines the builds that Go-Releaser should produce. This includes specifying the operating systems (goos) and architectures (goarch) you want to support. In this example, Linux, Windows, and macOS are supported across different CPU architectures.</li> <li><code class="language-plaintext highlighter-rouge">CGO_ENABLED=0</code>: This environment variable ensures that the Go build process uses pure Go, which avoids dependencies on C libraries.</li> <li><code class="language-plaintext highlighter-rouge">Archives</code>: Specifies how the build output should be packaged (e.g., tar.gz for Unix-like systems and zip for Windows).</li> <li><code class="language-plaintext highlighter-rouge">Name_template</code>: Defines the naming format for the output artifacts based on the OS and architecture.</li> <li><code class="language-plaintext highlighter-rouge">Changelog</code>: Customizes how the changelog is generated. In this case, commits that start with docs: or test: are excluded from the changelog.</li> </ul>]]></content><author><name>Usman Jamil Bhatti</name></author><category term="Go-Releaser,"/><category term="GCP"/><category term="Cloud"/><category term="Build,"/><category term="Google"/><category term="Cloud"/><category term="Storage,"/><category term="CI/CD"/><summary type="html"><![CDATA[A step-by-step guide to running Go-Releaser within GCP Cloud Build and uploading generated artifacts to Google Cloud Storage, organized by version.]]></summary></entry><entry><title type="html">Implementing Robust API Rate Limiting with ASP.NET Core</title><link href="https://blog.teamfullstack.io//blog/2024/Api-Rate-Limit/" rel="alternate" type="text/html" title="Implementing Robust API Rate Limiting with ASP.NET Core"/><published>2024-08-08T00:00:00+00:00</published><updated>2024-08-08T00:00:00+00:00</updated><id>https://blog.teamfullstack.io//blog/2024/Api-Rate-Limit</id><content type="html" xml:base="https://blog.teamfullstack.io//blog/2024/Api-Rate-Limit/"><![CDATA[<h2 id="implementing-rate-limiting-in-aspnet-core">Implementing Rate Limiting in ASP.NET Core</h2> <h2 id="introduction">Introduction</h2> <p>In modern web applications, managing API request rates is crucial for maintaining performance and ensuring fair usage among users. Implementing rate limiting helps to prevent abuse, mitigate denial-of-service attacks, and ensure that your service remains reliable for all users. In this blog post, we’ll explore how to implement a robust API rate limiting system using ASP.NET Core.</p> <h2 id="what-is-rate-limiting">What is Rate Limiting?</h2> <p>Rate limiting is a technique used to control the number of requests a client can make to an API within a specified time frame. This is essential for preventing system overload, maintaining quality of service, and ensuring that no single client consumes too many resources, which could lead to degraded performance for others.</p> <h2 id="how-does-rate-limiting-work">How Does Rate Limiting Work?</h2> <p>Rate limiting can be implemented using various algorithms, each with its own approach to controlling the rate of requests. Common algorithms include:</p> <ul> <li><strong>Token Bucket</strong>: Tokens are added to a bucket at a fixed rate, and each request consumes a token. If the bucket is empty, the request is denied or delayed.</li> <li><strong>Leaky Bucket</strong>: Similar to Token Bucket, but with a focus on ensuring a steady outflow of requests, smoothing out bursts.</li> <li><strong>Fixed Window</strong>: Counts the number of requests within a fixed time window (e.g., 1 minute) and enforces a limit.</li> <li><strong>Sliding Window</strong>: Similar to Fixed Window, but the time window slides forward with each request, providing a more granular rate limit.</li> </ul> <h2 id="benefits-of-rate-limiting">Benefits of Rate Limiting</h2> <p>Implementing rate limiting provides several key benefits:</p> <ol> <li><strong>Prevents Abuse</strong>: Ensures that no single client can overwhelm the API with too many requests.</li> <li><strong>Improves Performance</strong>: Helps maintain consistent performance by controlling the load on the server.</li> <li><strong>Enhances Security</strong>: Mitigates denial-of-service (DoS) attacks by limiting the rate of incoming requests.</li> <li><strong>Ensures Fair Usage</strong>: Guarantees that resources are distributed fairly among users.</li> </ol> <h2 id="implementing-rate-limiting">Implementing Rate Limiting</h2> <p>To implement rate limiting in an ASP.NET Core application, follow these steps:</p> <h3 id="1-add-rate-limiting-services">1. Add Rate Limiting Services</h3> <p>First, you need to add and configure the rate limiting services in your <code class="language-plaintext highlighter-rouge">Program.cs</code> file:</p> <ul> <li>You can download code from this repository <a href="https://github.com/Luqmant51/RateLimit.Blog">Api Rate Limiting</a></li> </ul> <div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="nf">AddRateLimiter</span><span class="p">(</span><span class="n">limiterOptions</span> <span class="p">=&gt;</span>
<span class="p">{</span>
    <span class="n">limiterOptions</span><span class="p">.</span><span class="nf">AddPolicy</span><span class="p">(</span><span class="s">"jwt"</span><span class="p">,</span> <span class="n">partitioner</span><span class="p">:</span> <span class="n">httpContext</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">accessToken</span> <span class="p">=</span> <span class="n">httpContext</span><span class="p">.</span><span class="n">Features</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">IAuthenticateResultFeature</span><span class="p">&gt;()?</span>
                              <span class="p">.</span><span class="n">AuthenticateResult</span><span class="p">?.</span><span class="n">Properties</span><span class="p">?.</span><span class="nf">GetTokenValue</span><span class="p">(</span><span class="s">"access_token"</span><span class="p">)</span>
                          <span class="p">??</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(!</span><span class="n">StringValues</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">accessToken</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">RateLimitPartition</span><span class="p">.</span><span class="nf">GetTokenBucketLimiter</span><span class="p">(</span><span class="n">accessToken</span><span class="p">,</span> <span class="n">_</span> <span class="p">=&gt;</span>
                <span class="k">new</span> <span class="n">TokenBucketRateLimiterOptions</span>
                <span class="p">{</span>
                    <span class="n">TokenLimit</span> <span class="p">=</span> <span class="m">10</span><span class="p">,</span>
                    <span class="n">QueueProcessingOrder</span> <span class="p">=</span> <span class="n">QueueProcessingOrder</span><span class="p">.</span><span class="n">OldestFirst</span><span class="p">,</span>
                    <span class="n">QueueLimit</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span>
                    <span class="n">ReplenishmentPeriod</span> <span class="p">=</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromSeconds</span><span class="p">(</span><span class="m">60</span><span class="p">),</span>
                    <span class="n">TokensPerPeriod</span> <span class="p">=</span> <span class="m">10</span><span class="p">,</span>
                    <span class="n">AutoReplenishment</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
                <span class="p">});</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">RateLimitPartition</span><span class="p">.</span><span class="nf">GetTokenBucketLimiter</span><span class="p">(</span><span class="s">"Anon"</span><span class="p">,</span> <span class="n">_</span> <span class="p">=&gt;</span>
            <span class="k">new</span> <span class="n">TokenBucketRateLimiterOptions</span>
            <span class="p">{</span>
                <span class="n">TokenLimit</span> <span class="p">=</span> <span class="m">5</span><span class="p">,</span>
                <span class="n">QueueProcessingOrder</span> <span class="p">=</span> <span class="n">QueueProcessingOrder</span><span class="p">.</span><span class="n">OldestFirst</span><span class="p">,</span>
                <span class="n">QueueLimit</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span>
                <span class="n">ReplenishmentPeriod</span> <span class="p">=</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromSeconds</span><span class="p">(</span><span class="m">60</span><span class="p">),</span>
                <span class="n">TokensPerPeriod</span> <span class="p">=</span> <span class="m">5</span><span class="p">,</span>
                <span class="n">AutoReplenishment</span> <span class="p">=</span> <span class="k">true</span>
            <span class="p">});</span>
    <span class="p">});</span>
    <span class="n">limiterOptions</span><span class="p">.</span><span class="n">OnRejected</span> <span class="p">=</span> <span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">cancellationToken</span><span class="p">)</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">Lease</span><span class="p">.</span><span class="nf">TryGetMetadata</span><span class="p">(</span><span class="n">MetadataName</span><span class="p">.</span><span class="n">RetryAfter</span><span class="p">,</span> <span class="k">out</span> <span class="n">TimeSpan</span> <span class="n">retryAfter</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="n">context</span><span class="p">.</span><span class="n">HttpContext</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">Headers</span><span class="p">.</span><span class="n">RetryAfter</span> <span class="p">=</span> <span class="n">retryAfter</span><span class="p">.</span><span class="n">TotalSeconds</span><span class="p">.</span><span class="nf">ToString</span><span class="p">(</span><span class="n">CultureInfo</span><span class="p">.</span><span class="n">InvariantCulture</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="n">context</span><span class="p">.</span><span class="n">HttpContext</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">StatusCode</span> <span class="p">=</span> <span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status429TooManyRequests</span><span class="p">;</span>
        <span class="n">context</span><span class="p">.</span><span class="n">HttpContext</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="nf">WriteAsync</span><span class="p">(</span><span class="s">"Too many requests. Please try again later."</span><span class="p">,</span> <span class="n">cancellationToken</span><span class="p">:</span> <span class="n">cancellationToken</span><span class="p">);</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nf">ValueTask</span><span class="p">();</span>
    <span class="p">};</span>
<span class="p">});</span>
</code></pre></div></div> <h2 id="what-is-a-partitioned-rate-limiter">What is a Partitioned Rate Limiter?</h2> <p>A partitioned rate limiter allows you to apply different rate limiting policies based on specific characteristics of incoming requests, such as user identity, IP address, or API key. This approach enables you to tailor rate limits to different groups of users or request types.</p> <h3 id="how-partitioning-works"><code class="language-plaintext highlighter-rouge">How Partitioning Works</code></h3> <p>In the provided code example:</p> <ul> <li> <p>Partitioning by Access Token:</p> <ul> <li>If a request contains an access token, a specific rate limiting policy is applied based on that token (e.g., 10 requests per minute).</li> <li>If no token is present (anonymous request), a different policy is applied (e.g., 5 requests per minute).</li> </ul> </li> <li>Rate Limiting Policy: <ul> <li>Each partition has its own <code class="language-plaintext highlighter-rouge">TokenBucketLimiterOptions</code>, specifying the number of allowed requests, replenishment rate, and other settings.</li> </ul> </li> <li>Handling Rate Limit Exceed: <ul> <li>When a rate limit is exceeded, the OnRejected callback sends a 429 Too Many Requests response, possibly including a Retry-After header.</li> </ul> </li> <li>Benefits of Partitioned Rate Limiting <ul> <li><strong>Customization</strong>: Custom rate limits for different user groups or request types.</li> <li><strong>Fairness</strong>: Ensures resource distribution is fair among users.</li> <li><strong>Scalability</strong>: Helps in scaling rate limiting strategies as your application grows.</li> </ul> </li> </ul> <p>This approach is particularly useful in scenarios where different users or client types require different levels of access, ensuring that your API remains responsive and reliable for all users.</p>]]></content><author><name>Usman Jamil Bhatti</name></author><category term="ASP.NET"/><category term="Core,"/><category term="API"/><category term="Rate"/><category term="Limiting,"/><category term="Web"/><category term="Development"/><summary type="html"><![CDATA[Learn how to implement API rate limiting in an ASP.NET Core application to manage request rates and ensure fair usage.]]></summary></entry><entry><title type="html">Deploying keycloak with a purchased SSL</title><link href="https://blog.teamfullstack.io//blog/2024/keycloak-nginx-ssl/" rel="alternate" type="text/html" title="Deploying keycloak with a purchased SSL"/><published>2024-04-22T00:00:00+00:00</published><updated>2024-04-22T00:00:00+00:00</updated><id>https://blog.teamfullstack.io//blog/2024/keycloak-nginx-ssl</id><content type="html" xml:base="https://blog.teamfullstack.io//blog/2024/keycloak-nginx-ssl/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>We can deploy a working keycloak instance on a VM (with a static IP address) and a domain with an <code class="language-plaintext highlighter-rouge">A type custom record</code> pointing to this IP address. For this example we will consider the domain <code class="language-plaintext highlighter-rouge">sso.example.com</code> that points to the static IP address of your VM.</p> <h2 id="prepare-certificates">Prepare Certificates</h2> <p>Let just assemble the files that we acquired while buying the SSL certificate. Lets first merge our intermediate and root Certificates into a single one:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>identity_example_com_domain.crt intermediate.crt root.crt <span class="o">&gt;&gt;</span> sso.example.com.crt
</code></pre></div></div> <p>If you received the intermediate Certificates in one bundle file then you can do something like</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>identity_example_com_domain.crt identity_example_com_domain.ca-bundle <span class="o">&gt;&gt;</span> sso.example.com.crt
</code></pre></div></div> <p>Now you should have 2 files:</p> <ul> <li>sso.example.com.crt (your public key)</li> <li>sso.example.com.key (your private key)</li> </ul> <h2 id="directory-structure">Directory Structure</h2> <p>The directory structure should be something like the following:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>keycloak
├── docker-compose.yml
├── keycloak.conf
├── nginx
│   └── nginx.conf
└── ssl
</code></pre></div></div> <h3 id="nginxconf">nginx.conf</h3> <p>You might need to adjust this file based on your needs. But it should work pretty much as-is. This particular confguration will do SSL termination for you. Notice the line <code class="language-plaintext highlighter-rouge">proxy_pass http://sso:8080</code>, where <code class="language-plaintext highlighter-rouge">sso</code> is the name of the keycloak docker service and keycloak runs of 8080 for http traffic.</p> <div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">worker_processes</span> <span class="m">1</span>;

<span class="n">events</span> { <span class="n">worker_connections</span> <span class="m">1024</span>; }

<span class="n">http</span> {
    <span class="n">sendfile</span> <span class="n">on</span>;
    <span class="n">large_client_header_buffers</span> <span class="m">4</span> <span class="m">32</span><span class="n">k</span>;

    <span class="n">server</span> {
        <span class="n">listen</span> <span class="m">80</span>;
        <span class="n">server_name</span> <span class="n">sso</span>.<span class="n">example</span>.<span class="n">com</span>;

        <span class="n">location</span> / {
            <span class="n">return</span> <span class="m">301</span> <span class="n">https</span>://$<span class="n">host</span>$<span class="n">request_uri</span>;
        }
    }

    <span class="n">server</span> {
        <span class="n">listen</span> <span class="m">443</span> <span class="n">ssl</span>;
        <span class="n">server_name</span> <span class="n">sso</span>.<span class="n">example</span>.<span class="n">com</span>;

        <span class="n">ssl_certificate</span> /<span class="n">etc</span>/<span class="n">ssl</span>/<span class="n">certs</span>/<span class="n">sso</span>.<span class="n">example</span>.<span class="n">com</span>.<span class="n">crt</span>;
        <span class="n">ssl_certificate_key</span> /<span class="n">etc</span>/<span class="n">ssl</span>/<span class="n">private</span>/<span class="n">sso</span>.<span class="n">example</span>.<span class="n">com</span>.<span class="n">key</span>;

        <span class="n">location</span> / {
            <span class="n">proxy_pass</span>         <span class="n">http</span>://<span class="n">sso</span>:<span class="m">8080</span>;
            <span class="n">proxy_redirect</span>     <span class="n">off</span>;
            <span class="n">proxy_http_version</span> <span class="m">1</span>.<span class="m">1</span>;
            <span class="n">proxy_cache_bypass</span> $<span class="n">http_upgrade</span>;
            <span class="n">proxy_set_header</span>   <span class="n">Upgrade</span> $<span class="n">http_upgrade</span>;
            <span class="n">proxy_set_header</span>   <span class="n">Connection</span> <span class="n">keep</span>-<span class="n">alive</span>;
            <span class="n">proxy_set_header</span>   <span class="n">Host</span> $<span class="n">host</span>;
            <span class="n">proxy_set_header</span>   <span class="n">X</span>-<span class="n">Real</span>-<span class="n">IP</span> $<span class="n">remote_addr</span>;
            <span class="n">proxy_set_header</span>   <span class="n">X</span>-<span class="n">Forwarded</span>-<span class="n">For</span> $<span class="n">proxy_add_x_forwarded_for</span>;
            <span class="n">proxy_set_header</span>   <span class="n">X</span>-<span class="n">Forwarded</span>-<span class="n">Proto</span> $<span class="n">scheme</span>;
            <span class="n">proxy_set_header</span>   <span class="n">X</span>-<span class="n">Forwarded</span>-<span class="n">Host</span> $<span class="n">server_name</span>;
            <span class="n">proxy_buffer_size</span>           <span class="m">128</span><span class="n">k</span>;
            <span class="n">proxy_buffers</span>               <span class="m">4</span> <span class="m">256</span><span class="n">k</span>;
            <span class="n">proxy_busy_buffers_size</span>     <span class="m">256</span><span class="n">k</span>;
        }
    }
}
</code></pre></div></div> <h3 id="keycloakconf">keycloak.conf</h3> <p>We map this file as a volume to our keycloak instance so it knows information such as which database provider to use etc.</p> <div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">proxy</span>=<span class="n">edge</span>
<span class="n">db</span>=<span class="n">postgres</span>
<span class="n">db</span>-<span class="n">url</span>-<span class="n">host</span>=<span class="n">postgres</span>
<span class="n">db</span>-<span class="n">user</span>=<span class="n">keycloak</span>
<span class="n">db</span>-<span class="n">password</span>=
<span class="n">db</span>-<span class="n">database</span>=<span class="n">keycloak</span>
<span class="n">db</span>-<span class="n">schema</span>=<span class="n">public</span>
<span class="n">hostname</span>-<span class="n">strict</span>=<span class="n">false</span>
<span class="n">http</span>-<span class="n">enabled</span>=<span class="n">true</span>
</code></pre></div></div> <h3 id="docker-composeyml">docker-compose.yml</h3> <p>There are a few important things to notice:</p> <ul> <li>How our nginx.conf is passed to the nginx instance, using volumes</li> <li>How our keycloak.conf is passed to the keycloak instance, using volumes</li> <li>How the certificates are being passed to the nginx instance which are also mentioned by location in nginx.conf</li> </ul> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3.7"</span>

<span class="na">services</span><span class="pi">:</span>    
  <span class="na">sso</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">quay.io/keycloak/keycloak:24.0</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">keycloak"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">/etc/localtime:/etc/localtime:ro</span>
      <span class="pi">-</span> <span class="s">./keycloak.conf:/opt/keycloak/conf/keycloak.conf</span>
    <span class="na">command</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">start</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">KEYCLOAK_ADMIN=</span>
      <span class="pi">-</span> <span class="s">KEYCLOAK_ADMIN_PASSWORD=</span>
      <span class="pi">-</span> <span class="s">PROXY_ADDRESS_FORWARDING=true</span>
      <span class="pi">-</span> <span class="s">VIRTUAL_HOST=sso.example.com</span>
      <span class="pi">-</span> <span class="s">VIRTUAL_PORT=8080</span>
      <span class="pi">-</span> <span class="s">LETSENCRYPT_HOST=sso.example.com</span>
      <span class="pi">-</span> <span class="s">KC_DB_PASSWORD=p0HfTu3dnW6G3</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">internal</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">database</span>

  <span class="na">database</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">postgres:15</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">postgres"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">POSTGRES_USER=keycloak</span>
      <span class="pi">-</span> <span class="s">POSTGRES_DATABASE=keycloak</span>
      <span class="pi">-</span> <span class="s">POSTGRES_PASSWORD=p0HfTu3dnW6G3</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">postgres_data:/var/lib/postgresql/data</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">internal</span>

  <span class="na">reverseproxy</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx:1.23</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">reverseproxy"</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">443:443"</span> 
      <span class="pi">-</span> <span class="s2">"</span><span class="s">80:80"</span> 
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./nginx/nginx.conf:/etc/nginx/nginx.conf:ro</span>
      <span class="pi">-</span> <span class="s">./ssl/sso.example.com.crt:/etc/ssl/certs/sso.example.com.crt</span>
      <span class="pi">-</span> <span class="s">./ssl/sso.example.com.key:/etc/ssl/private/sso.example.com.key</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">internal</span>

<span class="na">networks</span><span class="pi">:</span>
  <span class="na">internal</span><span class="pi">:</span>
    <span class="na">driver</span><span class="pi">:</span> <span class="s">bridge</span>
    <span class="na">driver_opts</span><span class="pi">:</span>
      <span class="c1"># Openstack spezifisch, kann auf 1500 gelassen werden wenn ihr auf</span>
      <span class="c1"># Bare Metal lauft. </span>
      <span class="na">com.docker.network.driver.mtu</span><span class="pi">:</span> <span class="m">1450</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">postgres_data</span><span class="pi">:</span>
</code></pre></div></div> <h1 id="lets-run-it">Lets run it</h1> <p>Lets cross our fingers and run the infamous command and hope it works. Make sure you are inside the keycloak folder when you run this</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker compose up <span class="nt">-d</span>
</code></pre></div></div> <p>If we did everything right, a running keycloak instance should be available at: https://sso.example.com and the <code class="language-plaintext highlighter-rouge">http</code> equivalent should auto redirect to <code class="language-plaintext highlighter-rouge">https</code></p>]]></content><author><name>Usman Jamil Bhatti</name></author><category term="identity-as-a-service,"/><category term="ssl"/><category term="keycloak"/><category term="docker-compose"/><summary type="html"><![CDATA[Keycloak, Postgres, Nginx and positive SSL]]></summary></entry><entry><title type="html">Asp.net 8.0 and React with Docker-compose</title><link href="https://blog.teamfullstack.io//blog/2024/asp-react-docker-compose/" rel="alternate" type="text/html" title="Asp.net 8.0 and React with Docker-compose"/><published>2024-04-18T00:00:00+00:00</published><updated>2024-04-18T00:00:00+00:00</updated><id>https://blog.teamfullstack.io//blog/2024/asp-react-docker-compose</id><content type="html" xml:base="https://blog.teamfullstack.io//blog/2024/asp-react-docker-compose/"><![CDATA[<p>ASP.net 8.0 and React with Docker compose Create root folder name like <code class="language-plaintext highlighter-rouge">asp-react-nginx-compose</code> or other suitable.</p> <p>In it create 3 folders and 1 file in root folder :</p> <h4 id="the-project-structure-is">The Project structure is:</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app
├── backend
├── docker-compose.yml
├── frontend
└── nginx

4 directories, 1 file
</code></pre></div></div> <p>Here is the reference of project public repo in github <a href="https://github.com/Luqmant51/asp-react-nginx-compose">Source Code</a> of given example project asp-react-nginx-compose.</p> <h3 id="aspnet-80-and-react-with-docker-compose">ASP.NET 8.0 and React with Docker Compose</h3> <p>We will see how docker compose can be used to perform orchestration between containers, keeping isolation in mind i.e., while some containers can talk to each other, we might not want that for others e.g., have NGINX be the communications broker between the front-end and back-end and not allow them to talk to each other directly. This has several use-cases which are outside the scope of this blog.</p> <h2 id="backend-configuration">Backend Configuration</h2> <p>This will generate a <code class="language-plaintext highlighter-rouge">Dockerfile</code> in your project directory, which might look something like this:</p> <div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.</span>
<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:8.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">USER</span><span class="s"> app</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 8080</span>
<span class="k">EXPOSE</span><span class="s"> 8081</span>
<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:8.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">ARG</span><span class="s"> BUILD_CONFIGURATION=Release</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> ["backend.csproj", "."]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"./backend.csproj"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/."</span>
<span class="k">RUN </span>dotnet build <span class="s2">"./backend.csproj"</span> <span class="nt">-c</span> <span class="nv">$BUILD_CONFIGURATION</span> <span class="nt">-o</span> /app/build
<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">ARG</span><span class="s"> BUILD_CONFIGURATION=Release</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"./backend.csproj"</span> <span class="nt">-c</span> <span class="nv">$BUILD_CONFIGURATION</span> <span class="nt">-o</span> /app/publish /p:UseAppHost<span class="o">=</span><span class="nb">false</span>
<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "backend.dll"]</span>
</code></pre></div></div> <h2 id="frontend-configuration">Frontend Configuration</h2> <p>In the <code class="language-plaintext highlighter-rouge">frontend</code> folder, create a <code class="language-plaintext highlighter-rouge">Dockerfile</code> with the following content:</p> <div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> node:21.5.0-alpine</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> package.json ./</span>
<span class="k">RUN </span>npm <span class="nb">install</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">RUN </span>npm run build
<span class="k">RUN </span>npm <span class="nb">install</span> <span class="nt">-g</span> serve
<span class="k">CMD</span><span class="s"> ["serve", "-s", "build", "-l", "4000"]</span>
<span class="k">EXPOSE</span><span class="s"> 4000</span>
</code></pre></div></div> <h2 id="docker-compose-configuration">Docker Compose Configuration</h2> <p>At the root of the project, create a <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file to define and run multi-container Docker applications. Here is a sample configuration:</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.8'</span>
<span class="na">services</span><span class="pi">:</span>
<span class="na">  backend</span><span class="pi">:</span>
<span class="na">    build</span><span class="pi">:</span>
<span class="na">      context</span><span class="pi">:</span> <span class="s">./backend</span>
<span class="na">      dockerfile</span><span class="pi">:</span> <span class="s">Dockerfile</span>
<span class="na">  frontend</span><span class="pi">:</span>
<span class="na">    build</span><span class="pi">:</span>
<span class="na">      context</span><span class="pi">:</span> <span class="s">./frontend</span>
<span class="na">      dockerfile</span><span class="pi">:</span> <span class="s">Dockerfile</span>
<span class="na">    depends_on</span><span class="pi">:</span>
<span class="s">      - backend</span>
<span class="na">  nginx</span><span class="pi">:</span>
<span class="na">    image</span><span class="pi">:</span> <span class="s">nginx:alpine</span>
<span class="na">    ports</span><span class="pi">:</span>
<span class="s">      - "80:80"</span>
<span class="na">    volumes</span><span class="pi">:</span>
<span class="s">      - ./nginx:/etc/nginx/conf.d</span>
<span class="na">    depends_on</span><span class="pi">:</span>
<span class="s">      - frontend</span>
</code></pre></div></div> <h2 id="nginx-configuration">Nginx Configuration</h2> <p>Create a <code class="language-plaintext highlighter-rouge">default.conf</code> file in the <code class="language-plaintext highlighter-rouge">nginx</code> folder with the following configuration:</p> <div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s">listen</span> <span class="mi">80</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s">location</span> <span class="n">/api</span> <span class="p">{</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_pass</span> <span class="s">http://backend:8080</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_http_version</span> <span class="mf">1.1</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">Upgrade</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">Connection</span> <span class="s">keep-alive</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_cache_bypass</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">X-Forwarded-Proto</span> <span class="nv">$scheme</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="err">}</span>
<span class="s"> </span> <span class="s"> </span> <span class="s">location</span> <span class="n">/</span> <span class="p">{</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_pass</span> <span class="s">http://frontend:4000</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_http_version</span> <span class="mf">1.1</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">Upgrade</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">Connection</span> <span class="s">keep-alive</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_cache_bypass</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">X-Forwarded-Proto</span> <span class="nv">$scheme</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="err">}</span>
<span class="err">}</span>
</code></pre></div></div> <h3 id="building-all-the-images">Building All the Images</h3> <p>To build all the images specified in your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file, use the following command from the root directory of your project (where your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> is located):</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose build
</code></pre></div></div> <p>This command will build all the Docker images for the services defined in your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>.</p> <h3 id="running-the-application">Running the Application</h3> <p>To start all the services defined in your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file, use the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up
</code></pre></div></div> <p>This will start all the containers. If you want to run them in detached mode (in the background), you can add the <code class="language-plaintext highlighter-rouge">-d</code> flag:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up <span class="nt">-d</span>
</code></pre></div></div> <h3 id="stopping-the-application">Stopping the Application</h3> <p>To stop the running containers without removing them, you can use:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose stop
</code></pre></div></div> <h3 id="removing-all-the-images">Removing All the Images</h3> <p>To remove all images created by the build process, you first need to stop and remove the containers, networks, volumes, and images associated with your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file. Here are the commands to do that:</p> <ol> <li>Stop the containers if they are running: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose down
</code></pre></div> </div> </li> <li>Remove the images: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose down <span class="nt">--rmi</span> all
</code></pre></div> </div> </li> </ol> <p>Alternatively, if you want to remove all Docker images (including those not associated with this project), you can use:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker image prune <span class="nt">-a</span>
</code></pre></div></div> <p>This command will remove all images not associated with a running container, or:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker rmi <span class="si">$(</span>docker images <span class="nt">-a</span> <span class="nt">-q</span><span class="si">)</span>
</code></pre></div></div> <p>This command forces the removal of all images by getting the IDs of all images and passing them to <code class="language-plaintext highlighter-rouge">docker rmi</code>.</p>]]></content><author><name>Usman Jamil Bhatti</name></author><category term="Docker-compose"/><category term="With"/><category term="dotnet"/><category term="and"/><category term="react"/><summary type="html"><![CDATA[How to create a project with Asp Dotnet 8.0 and React with Docker-compose]]></summary></entry><entry><title type="html">Install Docker</title><link href="https://blog.teamfullstack.io//blog/2024/installing-docker/" rel="alternate" type="text/html" title="Install Docker"/><published>2024-04-18T00:00:00+00:00</published><updated>2024-04-18T00:00:00+00:00</updated><id>https://blog.teamfullstack.io//blog/2024/installing-docker</id><content type="html" xml:base="https://blog.teamfullstack.io//blog/2024/installing-docker/"><![CDATA[<p>How to install Docker</p> <h2 id="installing-docker">Installing Docker</h2> <p>Before you start setting up your project, you need to install Docker on your machine if it isn’t already installed. Docker allows you to create, deploy, and run applications by using containers.</p> <h3 id="for-windows">For Windows</h3> <ol> <li>Download Docker Desktop from the <a href="https://www.docker.com/products/docker-desktop">official Docker website</a>.</li> <li>Run the installer and follow the on-screen instructions.</li> <li>Ensure that the “Windows Subsystem for Linux” (WSL2) feature is enabled on your machine.</li> <li>After installation, launch Docker Desktop and sign in or create a Docker account if prompted.</li> </ol> <h3 id="for-macos">For macOS</h3> <ol> <li>Download Docker Desktop for Mac from the <a href="https://www.docker.com/products/docker-desktop">official Docker website</a>.</li> <li>Open the downloaded <code class="language-plaintext highlighter-rouge">.dmg</code> file and drag the Docker icon to your Applications folder.</li> <li>Open Docker from your Applications to complete the installation.</li> <li>Docker may request your password to install a helper tool; provide your password to continue.</li> </ol> <h3 id="for-linux">For Linux</h3> <p>The installation commands can vary depending on your Linux distribution. Here’s how you can install Docker on Ubuntu:</p> <ol> <li>Using this link just copy and past <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://get.docker.com/ | bash
</code></pre></div> </div> <p>or</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-fsSL</span> https://get.docker.com/ <span class="nt">-o</span> get-docker.sh
</code></pre></div> </div> </li> </ol>]]></content><author><name>Usman Jamil Bhatti</name></author><category term="install"/><category term="Docker"/><summary type="html"><![CDATA[Easy step to install docker]]></summary></entry><entry><title type="html">Asp.net 8.0 and Next with Docker-compose</title><link href="https://blog.teamfullstack.io//blog/2024/asp-next-docker-compose/" rel="alternate" type="text/html" title="Asp.net 8.0 and Next with Docker-compose"/><published>2024-04-18T00:00:00+00:00</published><updated>2024-04-18T00:00:00+00:00</updated><id>https://blog.teamfullstack.io//blog/2024/asp-next-docker-compose</id><content type="html" xml:base="https://blog.teamfullstack.io//blog/2024/asp-next-docker-compose/"><![CDATA[<p>ASP.net 8.0 and Next with Docker compose Create root folder name like <code class="language-plaintext highlighter-rouge">asp-next-nginx-compose</code> or other suitable.</p> <p>In it create 3 folders and 1 file in root folder :</p> <h4 id="the-project-structure-is">The Project structure is:</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app
├── backend
├── docker-compose.yml
├── frontend
└── nginx

4 directories, 1 file
</code></pre></div></div> <p>Here is the reference of project public repo in GitHub <a href="https://github.com/Luqmant51/asp-next-nginx-compose">Source Code</a> of given example project asp-next-nginx-compose.</p> <h3 id="aspnet-80-and-next-with-docker-compose">ASP.NET 8.0 and Next with Docker Compose</h3> <p>We will see how docker compose can be used to perform orchestration between containers, keeping isolation in mind i.e., while some containers can talk to each other, we might not want that for others e.g., have NGINX be the communications broker between the front-end and back-end and not allow them to talk to each other directly. This has several use-cases which are outside the scope of this blog.</p> <h2 id="backend-configuration">Backend Configuration</h2> <p>This will generate a <code class="language-plaintext highlighter-rouge">Dockerfile</code> in your project directory, which might look something like this:</p> <div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.</span>
<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:8.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">USER</span><span class="s"> app</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 8080</span>
<span class="k">EXPOSE</span><span class="s"> 8081</span>
<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:8.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">ARG</span><span class="s"> BUILD_CONFIGURATION=Release</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> ["backend.csproj", "."]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"./backend.csproj"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/."</span>
<span class="k">RUN </span>dotnet build <span class="s2">"./backend.csproj"</span> <span class="nt">-c</span> <span class="nv">$BUILD_CONFIGURATION</span> <span class="nt">-o</span> /app/build
<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">ARG</span><span class="s"> BUILD_CONFIGURATION=Release</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"./backend.csproj"</span> <span class="nt">-c</span> <span class="nv">$BUILD_CONFIGURATION</span> <span class="nt">-o</span> /app/publish /p:UseAppHost<span class="o">=</span><span class="nb">false</span>
<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "backend.dll"]</span>
</code></pre></div></div> <h2 id="frontend-configuration">Frontend Configuration</h2> <p>In the <code class="language-plaintext highlighter-rouge">frontend</code> folder, create a <code class="language-plaintext highlighter-rouge">Dockerfile</code> with the following content:</p> <div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> node:21.5.0-alpine</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> package.json package-lock.json ./</span>
<span class="k">RUN </span>npm <span class="nb">install</span> <span class="nt">--frozen-lockfile</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">EXPOSE</span><span class="s"> 4000</span>
<span class="k">CMD</span><span class="s"> ["npm", "run", "dev"]</span>

</code></pre></div></div> <h2 id="docker-compose-configuration">Docker Compose Configuration</h2> <p>At the root of the project, create a <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file to define and run multi-container Docker applications. Here is a sample configuration:</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.8'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">backend</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">./backend</span>
      <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">Dockerfile</span>  <span class="c1"># Assuming the name is Dockerfile</span>
  <span class="na">frontend</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">./frontend</span>
      <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">Dockerfile</span>  <span class="c1"># Assuming the Dockerfile name is Docker.dev</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">backend</span>
  <span class="na">nginx</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx:alpine</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">80:80"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./nginx:/etc/nginx/conf.d</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">frontend</span>
</code></pre></div></div> <h2 id="nginx-configuration">Nginx Configuration</h2> <p>Create a <code class="language-plaintext highlighter-rouge">default.conf</code> file in the <code class="language-plaintext highlighter-rouge">nginx</code> folder with the following configuration:</p> <div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>

    <span class="c1"># Handle API requests</span>
    <span class="kn">location</span> <span class="n">/api</span> <span class="p">{</span>
        <span class="kn">proxy_pass</span> <span class="s">http://backend:8080</span><span class="p">;</span>
        <span class="kn">proxy_http_version</span> <span class="mf">1.1</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">Upgrade</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">Connection</span> <span class="s">keep-alive</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
        <span class="kn">proxy_cache_bypass</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-Proto</span> <span class="nv">$scheme</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1"># Handle Next.js HMR requests</span>
    <span class="kn">location</span> <span class="n">/_next/webpack-hmr</span> <span class="p">{</span>
        <span class="kn">proxy_pass</span> <span class="s">http://frontend:4000</span><span class="p">;</span>
        <span class="kn">proxy_http_version</span> <span class="mf">1.1</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">Upgrade</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">Connection</span> <span class="s">"upgrade"</span><span class="p">;</span>  <span class="c1"># Ensure connection is upgraded for WebSockets</span>
        <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
        <span class="kn">proxy_cache_bypass</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1"># Handle static files and Next.js routing</span>
    <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span>
        <span class="kn">proxy_pass</span> <span class="s">http://frontend:4000</span><span class="p">;</span>
        <span class="kn">proxy_http_version</span> <span class="mf">1.1</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">Upgrade</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">Connection</span> <span class="s">keep-alive</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
        <span class="kn">proxy_cache_bypass</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-Proto</span> <span class="nv">$scheme</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div> <h3 id="building-all-the-images">Building All the Images</h3> <p>To build all the images specified in your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file, use the following command from the root directory of your project (where your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> is located):</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose build
</code></pre></div></div> <p>This command will build all the Docker images for the services defined in your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>.</p> <h3 id="running-the-application">Running the Application</h3> <p>To start all the services defined in your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file, use the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up
</code></pre></div></div> <p>This will start all the containers. If you want to run them in detached mode (in the background), you can add the <code class="language-plaintext highlighter-rouge">-d</code> flag:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up <span class="nt">-d</span>
</code></pre></div></div> <h3 id="stopping-the-application">Stopping the Application</h3> <p>To stop the running containers without removing them, you can use:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose stop
</code></pre></div></div> <h3 id="removing-all-the-images">Removing All the Images</h3> <p>To remove all images created by the build process, you first need to stop and remove the containers, networks, volumes, and images associated with your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file. Here are the commands to do that:</p> <ol> <li>Stop the containers if they are running: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose down
</code></pre></div> </div> </li> <li>Remove the images: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose down <span class="nt">--rmi</span> all
</code></pre></div> </div> </li> </ol> <p>Alternatively, if you want to remove all Docker images (including those not associated with this project), you can use:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker image prune <span class="nt">-a</span>
</code></pre></div></div> <p>This command will remove all images not associated with a running container, or:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker rmi <span class="si">$(</span>docker images <span class="nt">-a</span> <span class="nt">-q</span><span class="si">)</span>
</code></pre></div></div> <p>This command forces the removal of all images by getting the IDs of all images and passing them to <code class="language-plaintext highlighter-rouge">docker rmi</code>.</p>]]></content><author><name>Usman Jamil Bhatti</name></author><category term="Docker-compose"/><category term="With"/><category term="dotnet"/><category term="and"/><category term="next"/><summary type="html"><![CDATA[How to create a project with Asp Dotnet 8.0 and Next with Docker-compose]]></summary></entry><entry><title type="html">ASP.net 8.0 and Entity Core Framework with postgres sql and docker compose</title><link href="https://blog.teamfullstack.io//blog/2024/aspnet-efcore/" rel="alternate" type="text/html" title="ASP.net 8.0 and Entity Core Framework with postgres sql and docker compose"/><published>2024-04-18T00:00:00+00:00</published><updated>2024-04-18T00:00:00+00:00</updated><id>https://blog.teamfullstack.io//blog/2024/aspnet-efcore</id><content type="html" xml:base="https://blog.teamfullstack.io//blog/2024/aspnet-efcore/"><![CDATA[<h1 id="aspnet-80-and-entity-core-framework-with-postgres-sql-and-docker-compose">ASP.net 8.0 and Entity Core Framework with Postgres SQL and docker-compose</h1> <p>Create Web API Project</p> <p>Here is the reference of the project public repo in GitHub <a href="https://github.com/usman-jamil/EFCore">Source Code</a> of the given example project asp-next-nginx-compose.</p> <p>This will generate a <code class="language-plaintext highlighter-rouge">Dockerfile</code> in your project directory, which might look something like this:</p> <div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code>version: '3.8'
services:
  postgres:
    container_name: container-pg
    image: postgres
    hostname: localhost
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: test_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped

volumes:
  postgres-data:
</code></pre></div></div> <p>In the terminal navigate to the root folder of the project</p> <h2 id="run-postgres-for-this-sample">Run Postgres for this sample</h2> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker compose <span class="nt">-f</span> docker-compose-postgres.yml up <span class="nt">-d</span>
</code></pre></div></div> <h3 id="here-is-the-command-to-run-migrations">Here is the command to run migrations</h3> <p>This command is used to create a migration:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet ef migrations add <span class="nt">--project</span> EFCore.Playground.Infrastructure/EFCore.Playground.Infrastructure.csproj <span class="nt">--startup-project</span> EFCore.Playground/EFCore.Playground.csproj <span class="nt">--context</span> EFCore.Playground.Infrastructure.ApplicationDbContext Initial <span class="nt">--output-dir</span> Migrations
</code></pre></div></div> <p>This command is used to create a database:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet ef database update <span class="nt">--project</span> EFCore.Playground.Infrastructure/EFCore.Playground.Infrastructure.csproj <span class="nt">--startup-project</span> EFCore.Playground/EFCore.Playground.csproj <span class="nt">--context</span> EFCore.Playground.Infrastructure.ApplicationDbContext
</code></pre></div></div> <h3 id="building-all-the-images">Building All the Images</h3> <p>To build all the images specified in your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file, use the following command from the root directory of your project (where your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> is located):</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose build
</code></pre></div></div> <p>This command will build all the Docker images for the services defined in your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>.</p> <h3 id="running-the-application">Running the Application</h3> <p>To start all the services defined in your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file, use the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up
</code></pre></div></div> <p>This will start all the containers. If you want to run them in detached mode (in the background), you can add the <code class="language-plaintext highlighter-rouge">-d</code> flag:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up <span class="nt">-d</span>
</code></pre></div></div> <h3 id="stopping-the-application">Stopping the Application</h3> <p>To stop the running containers without removing them, you can use:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose stop
</code></pre></div></div> <h3 id="removing-all-the-images">Removing All the Images</h3> <p>To remove all images created by the build process, you must first stop and remove the containers, networks, volumes, and images associated with your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file. Here are the commands to do that:</p> <ol> <li>Stop the containers if they are running: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose down
</code></pre></div> </div> </li> <li>Remove the images: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose down <span class="nt">--rmi</span> all
</code></pre></div> </div> </li> </ol> <p>Alternatively, if you want to remove all Docker images (including those not associated with this project), you can use:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker image prune <span class="nt">-a</span>
</code></pre></div></div> <p>This command will remove all images not associated with a running container, or:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker rmi <span class="si">$(</span>docker images <span class="nt">-a</span> <span class="nt">-q</span><span class="si">)</span>
</code></pre></div></div> <p>This command forces the removal of all images by getting the IDs of all images and passing them to <code class="language-plaintext highlighter-rouge">docker rmi</code>.</p>]]></content><author><name>Usman Jamil Bhatti</name></author><category term="Docker-compose"/><category term="With"/><category term="dotnet"/><category term="and"/><category term="next"/><summary type="html"><![CDATA[ASP.NET 8.0 is a framework for building web apps and services, paired with Entity Framework Core for database operations. Docker Compose is used to manage and deploy these applications with PostgreSQL, ensuring a streamlined development and deployment process.]]></summary></entry><entry><title type="html">Use scp command for general file sharing</title><link href="https://blog.teamfullstack.io//blog/2024/scp-tool/" rel="alternate" type="text/html" title="Use scp command for general file sharing"/><published>2024-03-31T00:00:00+00:00</published><updated>2024-03-31T00:00:00+00:00</updated><id>https://blog.teamfullstack.io//blog/2024/scp-tool</id><content type="html" xml:base="https://blog.teamfullstack.io//blog/2024/scp-tool/"><![CDATA[<p>Please review the post <code class="language-plaintext highlighter-rouge">Configuring ssh on linux</code> in order to be able to follow along. This way you will have access to an ssh server.</p> <h2 id="some-useful-commands">Some useful commands</h2> <p>Lets generate some handy shell scripts that can be reused across the terminal (from any directory). Be sure to move the shell scripts to <code class="language-plaintext highlighter-rouge">/usr/local/bin</code>.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── cat_remote.sh
├── download_remote.sh
├── list_remote.sh
└── upload_remote.sh
</code></pre></div></div> <h3 id="cat_remotesh">cat_remote.sh</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
ssh <span class="nt">-i</span> ~/.ssh/id_private_key root@ip_or_host <span class="nb">cat</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
</code></pre></div></div> <p>sample usage: <code class="language-plaintext highlighter-rouge">cat_remote.sh /root/envs.txt</code> This command simply prints the contents of the remote file <code class="language-plaintext highlighter-rouge">/root/envs.txt</code></p> <h3 id="download_remotesh">download_remote.sh</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
scp <span class="nt">-i</span> ~/.ssh/id_private_key root@ip_or_host:<span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>
</code></pre></div></div> <p>sample usage: <code class="language-plaintext highlighter-rouge">download_remote.sh /root/envs.txt ~/Desktop/envs1.txt</code> This command downloads the remote file <code class="language-plaintext highlighter-rouge">/root/envs.txt</code> to <code class="language-plaintext highlighter-rouge">~/Desktop/envs1.txt</code></p> <h3 id="list_remotesh">list_remote.sh</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
ssh <span class="nt">-i</span> ~/.ssh/id_private_key root@ip_or_host <span class="nb">ls</span> <span class="nt">-la</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
</code></pre></div></div> <p>sample usage: <code class="language-plaintext highlighter-rouge">list_remote.sh /root</code> This command list the contents of the remote directory <code class="language-plaintext highlighter-rouge">/root</code></p> <h3 id="upload_remotesh">upload_remote.sh</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
scp <span class="nt">-i</span> ~/.ssh/id_private_key <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> root@ip_or_host:<span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>
</code></pre></div></div> <p>sample usage: <code class="language-plaintext highlighter-rouge">upload_remote.sh ~/Downloads/envs.txt /root</code> This command copies the file <code class="language-plaintext highlighter-rouge">~/Downloads/envs.txt</code> to remote folder <code class="language-plaintext highlighter-rouge">/root</code></p>]]></content><author><name>Usman Jamil Bhatti</name></author><category term="sftp"/><category term="scp"/><summary type="html"><![CDATA[Using SFTP commands]]></summary></entry><entry><title type="html">Instaling bazel on linux</title><link href="https://blog.teamfullstack.io//blog/2024/install-bazel-ubuntu/" rel="alternate" type="text/html" title="Instaling bazel on linux"/><published>2024-01-25T00:00:00+00:00</published><updated>2024-01-25T00:00:00+00:00</updated><id>https://blog.teamfullstack.io//blog/2024/install-bazel-ubuntu</id><content type="html" xml:base="https://blog.teamfullstack.io//blog/2024/install-bazel-ubuntu/"><![CDATA[<h3 id="required-dependencies">Required Dependencies</h3> <p>To install bazel for python project you need to install the following.</p> <ul> <li>Bazelisk</li> <li>poetry</li> <li>pyenv</li> </ul> <h3 id="pyenv">Pyenv</h3> <p>First of all <code class="language-plaintext highlighter-rouge">What is pyenv?</code> Basically, Pyenv is a tool to simplify installation and version changing in python. It helps developers quickly install or change the python version without needing to change the whole system.</p> <p>Let’s install pyenv so that every dependency or library installed will be exclusive to this project</p> <p>Open terminal and execute the following commands</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt update <span class="nt">-y</span>
</code></pre></div></div> <p>Now let’s install pyenv dependencies</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt install -y make build-essential libssl-dev zlib1g-dev \
&gt; libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev\
&gt; libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl\
&gt; git
</code></pre></div></div> <p>After that, we will install the latest version on Pyenv. So, we will need to clone from the Pyenv repository.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv install 3.10

pyenv global 3.10

poetry config virtualenvs.in-project true
</code></pre></div></div> <p>And for the last step, we must add pyenv to our path so that the pyenv command is recognized globally.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo 'export PYENV_ROOT="$HOME/.pyenv"' &gt;&gt; ~/.bashrc
echo 'export PATH="$PYENV_ROOT/bin:$PATH"' &gt;&gt; ~/.bashrc
echo 'eval "$(pyenv init --path)"' &gt;&gt; ~/.bashrc
</code></pre></div></div> <p>Finally, to start using pyenv, restart the shell and execute command:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv activate
</code></pre></div></div> <p>If you want to update pyenv you can use command</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv update
</code></pre></div></div> <h3 id="installing-python">Installing python</h3> <p>After configuring pyenv we need to install python.</p> <p>First check if python is already installed</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3
</code></pre></div></div> <p>if it shows error, run following commands</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt update
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install python3
</code></pre></div></div> <p>Now verify installation</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 --version
</code></pre></div></div> <h3 id="installing-bazel">Installing Bazel</h3> <p>Bazelisk is a wrapper for Bazel written in Go. It automatically picks a good version of Bazel given your current working directory, downloads it from the official server (if required) and then transparently passes through all command-line arguments to the real Bazel binary. You can call it just like you would call Bazel.</p> <h3 id="supported-versions">Supported Versions</h3> <p>Supported Ubuntu Linux platforms on the time of writing this blog are:</p> <ul> <li>22.04 (LTS)</li> <li>20.04 (LTS)</li> <li>18.04 (LTS)</li> </ul> <p>On Linux: You can download Bazelisk binary on our <a href="https://github.com/bazelbuild/bazelisk/releases">Releases</a> page and add it to your PATH manually, which also works on macOS and Windows.</p> <p>To verify install, run the following command</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bazel --version
</code></pre></div></div> <h3 id="installing-poetry">Installing poetry</h3> <p>Now let’s install poetry</p> <h4 id="introduction">Introduction</h4> <p>Poetry is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you. Poetry offers a lockfile to ensure repeatable installs, and can build your project for distribution</p> <p>To install poetry you need to install <strong>pip</strong> first</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install python3-pip
</code></pre></div></div> <p>To verify install, run the following command</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip3 --version
</code></pre></div></div> <p>Now to install poetry run the following command</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install poetry
</code></pre></div></div> <p>To verify install, run the following command</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry --version
</code></pre></div></div> <h3 id="how-do-i-configure-lsp--dsp-or-other-ide-tools-">How do I configure LSP / DSP or other IDE tools ?</h3> <p>Bazel runs in a sandbox, however we are using [poetry][poetry] to manage dependencies. These dependencies are located in the third_party/ folder. As long as you set your IDE python interpreter to be the poetry env python, things should function normally in your IDE.</p> <p>Here is one way to do this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd third_party
</code></pre></div></div> <h4 id="get-the-python-executable-form-the-virtual-env-used-by-poetry-this-is-the-python-interpreter-to-use">Get the python executable form the virtual env used by poetry, this is the python interpreter to use</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry env info --executable
</code></pre></div></div> <h4 id="an-easy-way-to-get-the-ide-to-use-the-right-environment-is-getting-the-poetry-shell-which-will-set-the-right-python-interpreter-and-then-cd-to-the-project-root-and-fire-up-your-editor">An easy way to get the IDE to use the right environment is getting the poetry shell, which will set the right python interpreter and then cd to the project root and fire up your editor</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd third_party

poetry shell

cd ..

code
</code></pre></div></div> <h3 id="setup-development-environment">Setup Development Environment</h3> <p>Create the environment</p> <p>Using terminal navigate to: third_party folder</p> <p>Run these commands</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry install

poetry shell

cd ..
</code></pre></div></div> <p>After setting up environment you can perform some functions using following commands</p> <h4 id="run-the-fast_api-locally-should-start-a-service-on-00008080">Run the fast_api locally (should start a service on 0.0.0.0:8080)</h4> <h4 id="open-api-documentation-available-at-docs">Open api documentation available at “/docs”</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bazel run //apps/api
</code></pre></div></div> <h4 id="run-the-starlette_api-locally-in-debug-mode-debugpy-will-wait-for-a-debugger-client-to-connect">Run the starlette_api locally in debug mode (debugpy will wait for a debugger client to connect)</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bazel run //apps/api --define DEBUG=1
</code></pre></div></div> <h3 id="clean-everything">Clean everything</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bazel clean --expunge
</code></pre></div></div> <h3 id="run-all-unit-tests">Run all unit tests</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bazel test $(bazel query 'attr(name, "module_tests", //...)') --test_output=streamed --test_arg="--disable-warnings" --nocache_test_results
</code></pre></div></div> <h3 id="run-format-and-linting-before-staging">Run format and linting (before staging)</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>isort $(git ls-files "*.py" --modified) &amp;&amp; black -l 120 $(git ls-files "*.py" --modified)
</code></pre></div></div> <h3 id="add-files-from-gitpatch">Add files from git.patch</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git app filename.patch
</code></pre></div></div> <h1 id="code-structure-in-tree-shape">Code structure in tree shape</h1> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>├── BUILD.bazel  
├── README.md  
├── Vonoy.postman_collection.json  
├── WORKSPACE.bazel  
├── apps  
│   └── api  
│       ├── BUILD.bazel  
│       ├── service.py  
│       └── test_service.http  
├── lib  
│   ├── forecast_model  
│   │   ├── api  
│   │   │   ├── BUILD.bazel  
│   │   │   ├── __init__.py  
│   │   │   ├── pyproject.toml  
│   │   │   └── routes.py  
│   │   ├── models  
│   │   │   ├── BUILD.bazel  
│   │   │   ├── __init__.py  
│   │   │   ├── __pycache__  
│   │   │   │   ├── __init__.cpython-39.pyc  
│   │   │   │   └── core.cpython-39.pyc  
│   │   │   ├── core.py  
│   │   │   ├── pyproject.toml  
│   │   │   └── tests  
│   │   │       ├── conftest.py  
│   │   │       └── test_forecast_input.py  
│   │   ├── services  
│   │   │   ├── BUILD.bazel  
│   │   │   ├── __init__.py  
│   │   │   ├── __pycache__  
│   │   │   │   ├── __init__.cpython-39.pyc  
│   │   │   │   └── services.cpython-39.pyc  
│   │   │   ├── models  
│   │   │   │   ├── __init__.py  
│   │   │   │   ├── __pycache__  
│   │   │   │   │   ├── __init__.cpython-39.pyc  
│   │   │   │   │   └── forecast_model.cpython-39.pyc  
│   │   │   │   └── forecast_model.py  
│   │   │   ├── pyproject.toml  
│   │   │   ├── services.py  
│   │   │   └── tests  
│   │   │       ├── conftest.py  
│   │   │       └── test_get_forecast_prediction.py  
│   │   └── testsupport  
│   │       ├── BUILD.bazel  
│   │       ├── __init__.py  
│   │       ├── forecast_sample_data.py  
│   │       └── pyproject.toml  
│   └── vonoy  
│       └── tools  
│           └── pytest  
│               ├── BUILD.bazel  
│               ├── defs.bzl  
│               └── pytest_wrapper.py  
├── pyproject.toml  
├── third_party  
│   ├── BUILD.bazel    
│   ├── poetry.lock  
│   └── pyproject.toml  
└── tree_2.1.1-2_amd64.deb  
</code></pre></div></div>]]></content><author><name>Zuhaib Sohail</name></author><category term="deployment"/><category term="bazel"/><category term="linux"/><summary type="html"><![CDATA[Setting up your bazel configurations on linux]]></summary></entry></feed>