<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://blog.teamfullstack.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://blog.teamfullstack.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2024-04-27T23:30:37+00:00</updated><id>https://blog.teamfullstack.io//feed.xml</id><title type="html">Team Full Stack</title><subtitle>Works of a small yet reliable dev team. </subtitle><entry><title type="html">Deploying keycloak with a purchased SSL</title><link href="https://blog.teamfullstack.io//blog/2024/keycloak-nginx-ssl/" rel="alternate" type="text/html" title="Deploying keycloak with a purchased SSL"/><published>2024-04-22T00:00:00+00:00</published><updated>2024-04-22T00:00:00+00:00</updated><id>https://blog.teamfullstack.io//blog/2024/keycloak-nginx-ssl</id><content type="html" xml:base="https://blog.teamfullstack.io//blog/2024/keycloak-nginx-ssl/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>We can deploy a working keycloak instance on a VM (with a static IP address) and a domain with an <code class="language-plaintext highlighter-rouge">A type custom record</code> pointing to this IP address. For this example we will consider the domain <code class="language-plaintext highlighter-rouge">sso.example.com</code> that points to the static IP address of your VM.</p> <h2 id="prepare-certificates">Prepare Certificates</h2> <p>Let just assemble the files that we acquired while buying the SSL certificate. Lets first merge our intermediate and root Certificates into a single one:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>identity_example_com_domain.crt intermediate.crt root.crt <span class="o">&gt;&gt;</span> sso.example.com.crt
</code></pre></div></div> <p>If you received the intermediate Certificates in one bundle file then you can do something like</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>identity_example_com_domain.crt identity_example_com_domain.ca-bundle <span class="o">&gt;&gt;</span> sso.example.com.crt
</code></pre></div></div> <p>Now you should have 2 files:</p> <ul> <li>sso.example.com.crt (your public key)</li> <li>sso.example.com.key (your private key)</li> </ul> <h2 id="directory-structure">Directory Structure</h2> <p>The directory structure should be something like the following:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>keycloak
├── docker-compose.yml
├── keycloak.conf
├── nginx
│   └── nginx.conf
└── ssl
</code></pre></div></div> <h3 id="nginxconf">nginx.conf</h3> <p>You might need to adjust this file based on your needs. But it should work pretty much as-is. This particular confguration will do SSL termination for you. Notice the line <code class="language-plaintext highlighter-rouge">proxy_pass http://sso:8080</code>, where <code class="language-plaintext highlighter-rouge">sso</code> is the name of the keycloak docker service and keycloak runs of 8080 for http traffic.</p> <div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">worker_processes</span> <span class="m">1</span>;

<span class="n">events</span> { <span class="n">worker_connections</span> <span class="m">1024</span>; }

<span class="n">http</span> {
    <span class="n">sendfile</span> <span class="n">on</span>;
    <span class="n">large_client_header_buffers</span> <span class="m">4</span> <span class="m">32</span><span class="n">k</span>;

    <span class="n">server</span> {
        <span class="n">listen</span> <span class="m">80</span>;
        <span class="n">server_name</span> <span class="n">sso</span>.<span class="n">example</span>.<span class="n">com</span>;

        <span class="n">location</span> / {
            <span class="n">return</span> <span class="m">301</span> <span class="n">https</span>://$<span class="n">host</span>$<span class="n">request_uri</span>;
        }
    }

    <span class="n">server</span> {
        <span class="n">listen</span> <span class="m">443</span> <span class="n">ssl</span>;
        <span class="n">server_name</span> <span class="n">sso</span>.<span class="n">example</span>.<span class="n">com</span>;

        <span class="n">ssl_certificate</span> /<span class="n">etc</span>/<span class="n">ssl</span>/<span class="n">certs</span>/<span class="n">sso</span>.<span class="n">example</span>.<span class="n">com</span>.<span class="n">crt</span>;
        <span class="n">ssl_certificate_key</span> /<span class="n">etc</span>/<span class="n">ssl</span>/<span class="n">private</span>/<span class="n">sso</span>.<span class="n">example</span>.<span class="n">com</span>.<span class="n">key</span>;

        <span class="n">location</span> / {
            <span class="n">proxy_pass</span>         <span class="n">http</span>://<span class="n">sso</span>:<span class="m">8080</span>;
            <span class="n">proxy_redirect</span>     <span class="n">off</span>;
            <span class="n">proxy_http_version</span> <span class="m">1</span>.<span class="m">1</span>;
            <span class="n">proxy_cache_bypass</span> $<span class="n">http_upgrade</span>;
            <span class="n">proxy_set_header</span>   <span class="n">Upgrade</span> $<span class="n">http_upgrade</span>;
            <span class="n">proxy_set_header</span>   <span class="n">Connection</span> <span class="n">keep</span>-<span class="n">alive</span>;
            <span class="n">proxy_set_header</span>   <span class="n">Host</span> $<span class="n">host</span>;
            <span class="n">proxy_set_header</span>   <span class="n">X</span>-<span class="n">Real</span>-<span class="n">IP</span> $<span class="n">remote_addr</span>;
            <span class="n">proxy_set_header</span>   <span class="n">X</span>-<span class="n">Forwarded</span>-<span class="n">For</span> $<span class="n">proxy_add_x_forwarded_for</span>;
            <span class="n">proxy_set_header</span>   <span class="n">X</span>-<span class="n">Forwarded</span>-<span class="n">Proto</span> $<span class="n">scheme</span>;
            <span class="n">proxy_set_header</span>   <span class="n">X</span>-<span class="n">Forwarded</span>-<span class="n">Host</span> $<span class="n">server_name</span>;
            <span class="n">proxy_buffer_size</span>           <span class="m">128</span><span class="n">k</span>;
            <span class="n">proxy_buffers</span>               <span class="m">4</span> <span class="m">256</span><span class="n">k</span>;
            <span class="n">proxy_busy_buffers_size</span>     <span class="m">256</span><span class="n">k</span>;
        }
    }
}
</code></pre></div></div> <h3 id="keycloakconf">keycloak.conf</h3> <p>We map this file as a volume to our keycloak instance so it knows information such as which database provider to use etc.</p> <div class="language-conf highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">proxy</span>=<span class="n">edge</span>
<span class="n">db</span>=<span class="n">postgres</span>
<span class="n">db</span>-<span class="n">url</span>-<span class="n">host</span>=<span class="n">postgres</span>
<span class="n">db</span>-<span class="n">user</span>=<span class="n">keycloak</span>
<span class="n">db</span>-<span class="n">password</span>=
<span class="n">db</span>-<span class="n">database</span>=<span class="n">keycloak</span>
<span class="n">db</span>-<span class="n">schema</span>=<span class="n">public</span>
<span class="n">hostname</span>-<span class="n">strict</span>=<span class="n">false</span>
<span class="n">http</span>-<span class="n">enabled</span>=<span class="n">true</span>
</code></pre></div></div> <h3 id="docker-composeyml">docker-compose.yml</h3> <p>There are a few important things to notice:</p> <ul> <li>How our nginx.conf is passed to the nginx instance, using volumes</li> <li>How our keycloak.conf is passed to the keycloak instance, using volumes</li> <li>How the certificates are being passed to the nginx instance which are also mentioned by location in nginx.conf</li> </ul> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3.7"</span>

<span class="na">services</span><span class="pi">:</span>    
  <span class="na">sso</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">quay.io/keycloak/keycloak:24.0</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">keycloak"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">/etc/localtime:/etc/localtime:ro</span>
      <span class="pi">-</span> <span class="s">./keycloak.conf:/opt/keycloak/conf/keycloak.conf</span>
    <span class="na">command</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">start</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">KEYCLOAK_ADMIN=</span>
      <span class="pi">-</span> <span class="s">KEYCLOAK_ADMIN_PASSWORD=</span>
      <span class="pi">-</span> <span class="s">PROXY_ADDRESS_FORWARDING=true</span>
      <span class="pi">-</span> <span class="s">VIRTUAL_HOST=sso.example.com</span>
      <span class="pi">-</span> <span class="s">VIRTUAL_PORT=8080</span>
      <span class="pi">-</span> <span class="s">LETSENCRYPT_HOST=sso.example.com</span>
      <span class="pi">-</span> <span class="s">KC_DB_PASSWORD=p0HfTu3dnW6G3</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">internal</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">database</span>

  <span class="na">database</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">postgres:15</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">postgres"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">POSTGRES_USER=keycloak</span>
      <span class="pi">-</span> <span class="s">POSTGRES_DATABASE=keycloak</span>
      <span class="pi">-</span> <span class="s">POSTGRES_PASSWORD=p0HfTu3dnW6G3</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">postgres_data:/var/lib/postgresql/data</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">internal</span>

  <span class="na">reverseproxy</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx:1.23</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">reverseproxy"</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">443:443"</span> 
      <span class="pi">-</span> <span class="s2">"</span><span class="s">80:80"</span> 
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./nginx/nginx.conf:/etc/nginx/nginx.conf:ro</span>
      <span class="pi">-</span> <span class="s">./ssl/sso.example.com.crt:/etc/ssl/certs/sso.example.com.crt</span>
      <span class="pi">-</span> <span class="s">./ssl/sso.example.com.key:/etc/ssl/private/sso.example.com.key</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">internal</span>

<span class="na">networks</span><span class="pi">:</span>
  <span class="na">internal</span><span class="pi">:</span>
    <span class="na">driver</span><span class="pi">:</span> <span class="s">bridge</span>
    <span class="na">driver_opts</span><span class="pi">:</span>
      <span class="c1"># Openstack spezifisch, kann auf 1500 gelassen werden wenn ihr auf</span>
      <span class="c1"># Bare Metal lauft. </span>
      <span class="na">com.docker.network.driver.mtu</span><span class="pi">:</span> <span class="m">1450</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">postgres_data</span><span class="pi">:</span>
</code></pre></div></div> <h1 id="lets-run-it">Lets run it</h1> <p>Lets cross our fingers and run the infamous command and hope it works. Make sure you are inside the keycloak folder when you run this</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker compose up <span class="nt">-d</span>
</code></pre></div></div> <p>If we did everything right, a running keycloak instance should be available at: https://sso.example.com and the <code class="language-plaintext highlighter-rouge">http</code> equivalent should auto redirect to <code class="language-plaintext highlighter-rouge">https</code></p>]]></content><author><name>Usman Jamil Bhatti</name></author><category term="identity-as-a-service,"/><category term="ssl"/><category term="keycloak"/><category term="docker-compose"/><summary type="html"><![CDATA[Keycloak, Postgres, Nginx and positive SSL]]></summary></entry><entry><title type="html">Asp.net 8.0 and React with Docker-compose</title><link href="https://blog.teamfullstack.io//blog/2024/asp-react-docker-compose/" rel="alternate" type="text/html" title="Asp.net 8.0 and React with Docker-compose"/><published>2024-04-18T00:00:00+00:00</published><updated>2024-04-18T00:00:00+00:00</updated><id>https://blog.teamfullstack.io//blog/2024/asp-react-docker-compose</id><content type="html" xml:base="https://blog.teamfullstack.io//blog/2024/asp-react-docker-compose/"><![CDATA[<p>ASP.net 8.0 and React with Docker compose Create root folder name like <code class="language-plaintext highlighter-rouge">asp-react-nginx-compose</code> or other suitable.</p> <p>In it create 3 folders and 1 file in root folder :</p> <h4 id="the-project-structure-is">The Project structure is:</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app
├── backend
├── docker-compose.yml
├── frontend
└── nginx

4 directories, 1 file
</code></pre></div></div> <p>Here is the reference of project public repo in github <a href="https://github.com/Luqmant51/asp-react-nginx-compose">Source Code</a> of given example project asp-react-nginx-compose.</p> <h3 id="aspnet-80-and-react-with-docker-compose">ASP.NET 8.0 and React with Docker Compose</h3> <p>We will see how docker compose can be used to perform orchestration between containers, keeping isolation in mind i.e., while some containers can talk to each other, we might not want that for others e.g., have NGINX be the communications broker between the front-end and back-end and not allow them to talk to each other directly. This has several use-cases which are outside the scope of this blog.</p> <h2 id="backend-configuration">Backend Configuration</h2> <p>This will generate a <code class="language-plaintext highlighter-rouge">Dockerfile</code> in your project directory, which might look something like this:</p> <div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.</span>
<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/aspnet:8.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">base</span>
<span class="k">USER</span><span class="s"> app</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">EXPOSE</span><span class="s"> 8080</span>
<span class="k">EXPOSE</span><span class="s"> 8081</span>
<span class="k">FROM</span><span class="w"> </span><span class="s">mcr.microsoft.com/dotnet/sdk:8.0</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>
<span class="k">ARG</span><span class="s"> BUILD_CONFIGURATION=Release</span>
<span class="k">WORKDIR</span><span class="s"> /src</span>
<span class="k">COPY</span><span class="s"> ["backend.csproj", "."]</span>
<span class="k">RUN </span>dotnet restore <span class="s2">"./backend.csproj"</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">WORKDIR</span><span class="s"> "/src/."</span>
<span class="k">RUN </span>dotnet build <span class="s2">"./backend.csproj"</span> <span class="nt">-c</span> <span class="nv">$BUILD_CONFIGURATION</span> <span class="nt">-o</span> /app/build
<span class="k">FROM</span><span class="w"> </span><span class="s">build</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">publish</span>
<span class="k">ARG</span><span class="s"> BUILD_CONFIGURATION=Release</span>
<span class="k">RUN </span>dotnet publish <span class="s2">"./backend.csproj"</span> <span class="nt">-c</span> <span class="nv">$BUILD_CONFIGURATION</span> <span class="nt">-o</span> /app/publish /p:UseAppHost<span class="o">=</span><span class="nb">false</span>
<span class="k">FROM</span><span class="w"> </span><span class="s">base</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">final</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> --from=publish /app/publish .</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["dotnet", "backend.dll"]</span>
</code></pre></div></div> <h2 id="frontend-configuration">Frontend Configuration</h2> <p>In the <code class="language-plaintext highlighter-rouge">frontend</code> folder, create a <code class="language-plaintext highlighter-rouge">Dockerfile</code> with the following content:</p> <div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> node:21.5.0-alpine</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>
<span class="k">COPY</span><span class="s"> package.json ./</span>
<span class="k">RUN </span>npm <span class="nb">install</span>
<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">RUN </span>npm run build
<span class="k">RUN </span>npm <span class="nb">install</span> <span class="nt">-g</span> serve
<span class="k">CMD</span><span class="s"> ["serve", "-s", "build", "-l", "4000"]</span>
<span class="k">EXPOSE</span><span class="s"> 4000</span>
</code></pre></div></div> <h2 id="docker-compose-configuration">Docker Compose Configuration</h2> <p>At the root of the project, create a <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file to define and run multi-container Docker applications. Here is a sample configuration:</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.8'</span>
<span class="na">services</span><span class="pi">:</span>
<span class="na">  backend</span><span class="pi">:</span>
<span class="na">    build</span><span class="pi">:</span>
<span class="na">      context</span><span class="pi">:</span> <span class="s">./backend</span>
<span class="na">      dockerfile</span><span class="pi">:</span> <span class="s">Dockerfile</span>
<span class="na">  frontend</span><span class="pi">:</span>
<span class="na">    build</span><span class="pi">:</span>
<span class="na">      context</span><span class="pi">:</span> <span class="s">./frontend</span>
<span class="na">      dockerfile</span><span class="pi">:</span> <span class="s">Dockerfile</span>
<span class="na">    depends_on</span><span class="pi">:</span>
<span class="s">      - backend</span>
<span class="na">  nginx</span><span class="pi">:</span>
<span class="na">    image</span><span class="pi">:</span> <span class="s">nginx:alpine</span>
<span class="na">    ports</span><span class="pi">:</span>
<span class="s">      - "80:80"</span>
<span class="na">    volumes</span><span class="pi">:</span>
<span class="s">      - ./nginx:/etc/nginx/conf.d</span>
<span class="na">    depends_on</span><span class="pi">:</span>
<span class="s">      - frontend</span>
</code></pre></div></div> <h2 id="nginx-configuration">Nginx Configuration</h2> <p>Create a <code class="language-plaintext highlighter-rouge">default.conf</code> file in the <code class="language-plaintext highlighter-rouge">nginx</code> folder with the following configuration:</p> <div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s">listen</span> <span class="mi">80</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s">location</span> <span class="n">/api</span> <span class="p">{</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_pass</span> <span class="s">http://backend:8080</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_http_version</span> <span class="mf">1.1</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">Upgrade</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">Connection</span> <span class="s">keep-alive</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_cache_bypass</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">X-Forwarded-Proto</span> <span class="nv">$scheme</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="err">}</span>
<span class="s"> </span> <span class="s"> </span> <span class="s">location</span> <span class="n">/</span> <span class="p">{</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_pass</span> <span class="s">http://frontend:4000</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_http_version</span> <span class="mf">1.1</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">Upgrade</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">Connection</span> <span class="s">keep-alive</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_cache_bypass</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s"> </span> <span class="s">proxy_set_header</span> <span class="s">X-Forwarded-Proto</span> <span class="nv">$scheme</span><span class="p">;</span>
<span class="kn"> </span> <span class="s"> </span> <span class="err">}</span>
<span class="err">}</span>
</code></pre></div></div> <h3 id="building-all-the-images">Building All the Images</h3> <p>To build all the images specified in your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file, use the following command from the root directory of your project (where your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> is located):</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose build
</code></pre></div></div> <p>This command will build all the Docker images for the services defined in your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>.</p> <h3 id="running-the-application">Running the Application</h3> <p>To start all the services defined in your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file, use the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up
</code></pre></div></div> <p>This will start all the containers. If you want to run them in detached mode (in the background), you can add the <code class="language-plaintext highlighter-rouge">-d</code> flag:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up <span class="nt">-d</span>
</code></pre></div></div> <h3 id="stopping-the-application">Stopping the Application</h3> <p>To stop the running containers without removing them, you can use:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose stop
</code></pre></div></div> <h3 id="removing-all-the-images">Removing All the Images</h3> <p>To remove all images created by the build process, you first need to stop and remove the containers, networks, volumes, and images associated with your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file. Here are the commands to do that:</p> <ol> <li>Stop the containers if they are running: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose down
</code></pre></div> </div> </li> <li>Remove the images: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose down <span class="nt">--rmi</span> all
</code></pre></div> </div> </li> </ol> <p>Alternatively, if you want to remove all Docker images (including those not associated with this project), you can use:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker image prune <span class="nt">-a</span>
</code></pre></div></div> <p>This command will remove all images not associated with a running container, or:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker rmi <span class="si">$(</span>docker images <span class="nt">-a</span> <span class="nt">-q</span><span class="si">)</span>
</code></pre></div></div> <p>This command forces the removal of all images by getting the IDs of all images and passing them to <code class="language-plaintext highlighter-rouge">docker rmi</code>.</p>]]></content><author><name>Usman Jamil Bhatti</name></author><category term="Docker-compose"/><category term="With"/><category term="dotnet"/><category term="and"/><category term="react"/><summary type="html"><![CDATA[How to create a project with Asp Dotnet 8.0 and React with Docker-compose]]></summary></entry><entry><title type="html">Install Docker</title><link href="https://blog.teamfullstack.io//blog/2024/installing-docker/" rel="alternate" type="text/html" title="Install Docker"/><published>2024-04-18T00:00:00+00:00</published><updated>2024-04-18T00:00:00+00:00</updated><id>https://blog.teamfullstack.io//blog/2024/installing-docker</id><content type="html" xml:base="https://blog.teamfullstack.io//blog/2024/installing-docker/"><![CDATA[<p>How to install Docker</p> <h2 id="installing-docker">Installing Docker</h2> <p>Before you start setting up your project, you need to install Docker on your machine if it isn’t already installed. Docker allows you to create, deploy, and run applications by using containers.</p> <h3 id="for-windows">For Windows</h3> <ol> <li>Download Docker Desktop from the <a href="https://www.docker.com/products/docker-desktop">official Docker website</a>.</li> <li>Run the installer and follow the on-screen instructions.</li> <li>Ensure that the “Windows Subsystem for Linux” (WSL2) feature is enabled on your machine.</li> <li>After installation, launch Docker Desktop and sign in or create a Docker account if prompted.</li> </ol> <h3 id="for-macos">For macOS</h3> <ol> <li>Download Docker Desktop for Mac from the <a href="https://www.docker.com/products/docker-desktop">official Docker website</a>.</li> <li>Open the downloaded <code class="language-plaintext highlighter-rouge">.dmg</code> file and drag the Docker icon to your Applications folder.</li> <li>Open Docker from your Applications to complete the installation.</li> <li>Docker may request your password to install a helper tool; provide your password to continue.</li> </ol> <h3 id="for-linux">For Linux</h3> <p>The installation commands can vary depending on your Linux distribution. Here’s how you can install Docker on Ubuntu:</p> <ol> <li>Using this link just copy and past <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://get.docker.com/ | bash
</code></pre></div> </div> <p>or</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-fsSL</span> https://get.docker.com/ <span class="nt">-o</span> get-docker.sh
</code></pre></div> </div> </li> </ol>]]></content><author><name>Usman Jamil Bhatti</name></author><category term="install"/><category term="Docker"/><summary type="html"><![CDATA[Easy step to install docker]]></summary></entry><entry><title type="html">Use scp command for general file sharing</title><link href="https://blog.teamfullstack.io//blog/2024/scp-tool/" rel="alternate" type="text/html" title="Use scp command for general file sharing"/><published>2024-03-31T00:00:00+00:00</published><updated>2024-03-31T00:00:00+00:00</updated><id>https://blog.teamfullstack.io//blog/2024/scp-tool</id><content type="html" xml:base="https://blog.teamfullstack.io//blog/2024/scp-tool/"><![CDATA[<p>Please review the post <code class="language-plaintext highlighter-rouge">Configuring ssh on linux</code> in order to be able to follow along. This way you will have access to an ssh server.</p> <h2 id="some-useful-commands">Some useful commands</h2> <p>Lets generate some handy shell scripts that can be reused across the terminal (from any directory). Be sure to move the shell scripts to <code class="language-plaintext highlighter-rouge">/usr/local/bin</code>.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── cat_remote.sh
├── download_remote.sh
├── list_remote.sh
└── upload_remote.sh
</code></pre></div></div> <h3 id="cat_remotesh">cat_remote.sh</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
ssh <span class="nt">-i</span> ~/.ssh/id_private_key root@ip_or_host <span class="nb">cat</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
</code></pre></div></div> <p>sample usage: <code class="language-plaintext highlighter-rouge">cat_remote.sh /root/envs.txt</code> This command simply prints the contents of the remote file <code class="language-plaintext highlighter-rouge">/root/envs.txt</code></p> <h3 id="download_remotesh">download_remote.sh</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
scp <span class="nt">-i</span> ~/.ssh/id_private_key root@ip_or_host:<span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>
</code></pre></div></div> <p>sample usage: <code class="language-plaintext highlighter-rouge">download_remote.sh /root/envs.txt ~/Desktop/envs1.txt</code> This command downloads the remote file <code class="language-plaintext highlighter-rouge">/root/envs.txt</code> to <code class="language-plaintext highlighter-rouge">~/Desktop/envs1.txt</code></p> <h3 id="list_remotesh">list_remote.sh</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
ssh <span class="nt">-i</span> ~/.ssh/id_private_key root@ip_or_host <span class="nb">ls</span> <span class="nt">-la</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
</code></pre></div></div> <p>sample usage: <code class="language-plaintext highlighter-rouge">list_remote.sh /root</code> This command list the contents of the remote directory <code class="language-plaintext highlighter-rouge">/root</code></p> <h3 id="upload_remotesh">upload_remote.sh</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
scp <span class="nt">-i</span> ~/.ssh/id_private_key <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> root@ip_or_host:<span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>
</code></pre></div></div> <p>sample usage: <code class="language-plaintext highlighter-rouge">upload_remote.sh ~/Downloads/envs.txt /root</code> This command copies the file <code class="language-plaintext highlighter-rouge">~/Downloads/envs.txt</code> to remote folder <code class="language-plaintext highlighter-rouge">/root</code></p>]]></content><author><name>Usman Jamil Bhatti</name></author><category term="sftp"/><category term="scp"/><summary type="html"><![CDATA[Using SFTP commands]]></summary></entry><entry><title type="html">Configuring ssh on linux</title><link href="https://blog.teamfullstack.io//blog/2024/install-ssh-linux/" rel="alternate" type="text/html" title="Configuring ssh on linux"/><published>2024-01-24T00:00:00+00:00</published><updated>2024-01-24T00:00:00+00:00</updated><id>https://blog.teamfullstack.io//blog/2024/install-ssh-linux</id><content type="html" xml:base="https://blog.teamfullstack.io//blog/2024/install-ssh-linux/"><![CDATA[<h3 id="generate-keys">Generate Keys</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># use ssh-keygen to generate your rsa keys and save to id_test</span>
ssh-keygen
</code></pre></div></div> <h3 id="copy-the-public-key">Copy the public key</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># copy the contents of your public key to the clip-board (macOS)</span>
<span class="nb">cat </span>id_test.pub | pbcopy
</code></pre></div></div> <h3 id="install-locally">Install locally</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-add id_test
</code></pre></div></div> <h3 id="install-on-remote-machine">Install on remote machine</h3> <p>If you connect to the remote machine using VNC then do so.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># install the public key</span>
<span class="nb">cd</span> ~
<span class="nb">mkdir</span> .ssh
<span class="nb">cd</span> .ssh
<span class="c"># create file authorized_keys</span>
<span class="nb">touch </span>authorized_keys
<span class="c"># copy the contents of public key to the file</span>
<span class="nb">cat </span>id_test.pub <span class="o">&gt;&gt;</span> authorized_keys
</code></pre></div></div> <h3 id="connect">Connect</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-i</span> id_test root@ip_or_host
</code></pre></div></div>]]></content><author><name>Usman Jamil Bhatti</name></author><category term="deployment"/><category term="ssh"/><category term="linux"/><summary type="html"><![CDATA[Adding your ssh key to a linux server]]></summary></entry><entry><title type="html">Deploying a dev/test keycloak environment</title><link href="https://blog.teamfullstack.io//blog/2024/keycloak-dev-environment/" rel="alternate" type="text/html" title="Deploying a dev/test keycloak environment"/><published>2024-01-22T00:00:00+00:00</published><updated>2024-01-22T00:00:00+00:00</updated><id>https://blog.teamfullstack.io//blog/2024/keycloak-dev-environment</id><content type="html" xml:base="https://blog.teamfullstack.io//blog/2024/keycloak-dev-environment/"><![CDATA[<p>We are going to deploy a keycloak development server on a virtual machine. This article is based on <a href="https://gitlab.desy.de/johannes.reppin/keycloak-docker-compose">Johannes Reppin’s</a> implementation. The basic steps are all mentioned in the README file of this repository. However, a few key steps are worth mentioning.</p> <p>Our identity server has been deployed to a virtual machine that has been hosted in GCP. For your subdomain you just need to create an <code class="language-plaintext highlighter-rouge">A</code> type record in your DNS settings that point the subdomain to the external IP of the virtual machine. Thats’s it!</p> <p>The initial steps are all in the <a href="https://gitlab.desy.de/johannes.reppin/keycloak-docker-compose">Blog</a> and <a href="https://app.pluralsight.com/library/courses/keycloak-getting-started/table-of-contents">this Plural Sight</a> course. Once you have completed the steps, clone the repo, navigate to the repository dir on your machine and run the following commands</p> <p>The interesting part about this installation is the <code class="language-plaintext highlighter-rouge">nginxproxy/acme-companion</code> image. This couples very nice with the base nginx image <code class="language-plaintext highlighter-rouge">nginxproxy/nginx-proxy</code> image as it issues an ssl certificate for you from let-encrypt.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker compose pull
<span class="nv">$ </span>docker compose up <span class="nt">-d</span>
</code></pre></div></div> <p>and Voilà! Your very own identity server is up and running. Don’t you just love open-source!</p>]]></content><author><name>Usman Jamil Bhatti</name></author><category term="identity-as-a-service"/><category term="keycloak"/><category term="docker"/><category term="lets-encrypt"/><summary type="html"><![CDATA[Keycloak, Postgres and lets-encrypt for TLS]]></summary></entry><entry><title type="html">Krazzy Adventures</title><link href="https://blog.teamfullstack.io//blog/2023/krazzy/" rel="alternate" type="text/html" title="Krazzy Adventures"/><published>2023-12-06T00:00:00+00:00</published><updated>2023-12-06T00:00:00+00:00</updated><id>https://blog.teamfullstack.io//blog/2023/krazzy</id><content type="html" xml:base="https://blog.teamfullstack.io//blog/2023/krazzy/"><![CDATA[<h2 id="admin-portal">Admin portal</h2> <p>This is a combination of different components accessible to users who are authorized by admin.</p> <p>It is divided into 3 main components.</p> <ul> <li>Users</li> <li>Events</li> <li>Images</li> </ul> <h3 id="users">Users</h3> <p>This section shows information about users in the form of table. Here,</p> <ul> <li>Admin can perform <strong>CRUD</strong> operations.</li> <li>Can <strong>authorize</strong> user for different roles.</li> </ul> <h3 id="events">Events</h3> <p>This section handles information about events.</p> <h4 id="create-event">Create Event</h4> <ul> <li>User can <strong>create</strong> event through <code class="language-plaintext highlighter-rouge">create event</code> page.</li> </ul> <h4 id="all-events">All Events</h4> <ul> <li>User can <strong>read</strong> information of all events in the form of table using <code class="language-plaintext highlighter-rouge">allevents</code> page.</li> <li>On <code class="language-plaintext highlighter-rouge">all events</code> page user can <strong>update</strong> and <strong>delete</strong> an event.</li> <li>User can <strong>publish</strong> an event whch will be visible to any user on <code class="language-plaintext highlighter-rouge">Events</code> page.</li> </ul> <h4 id="published-events">Published Events</h4> <ul> <li>On <code class="language-plaintext highlighter-rouge">Published Events</code> page all published events are shown.</li> <li>User can <strong>add</strong> images for a particular event after it has become past event.</li> <li>user can <strong>delete</strong> a published event</li> </ul> <h4 id="book-events">Book Events</h4> <ul> <li>On <code class="language-plaintext highlighter-rouge">Book Event page</code> user can <strong>view</strong> all events and number of bookings for each event to make appropriate arrangements.</li> </ul> <h3 id="images">Images</h3> <p>This section is divided into 2 segments.</p> <h4 id="upload-image">Upload Image</h4> <p>In this segment user can <strong>upload</strong> images for different <strong>sections</strong> throughout the website.</p> <h4 id="all-images">All Images</h4> <ul> <li>User can <strong>read</strong> information of all images in the form of table using <code class="language-plaintext highlighter-rouge">allimages</code> page.</li> <li>User can <strong>view</strong> images belonging to a particular section using <strong>filter dropdown</strong> available in the page.</li> <li>On <code class="language-plaintext highlighter-rouge">all images</code> page user can <strong>update</strong> the <strong>sequence</strong> of particular section and <strong>delete</strong> an image.</li> </ul> <hr/> <h2 id="homepage">Homepage</h2> <p>It is the <strong>main page</strong> of the website. When an user opens a website, he/she is redirected to this page.</p> <h3 id="sections">Sections</h3> <p>Important sections of this page are as follows.</p> <h4 id="highlights">Highlights</h4> <p><code class="language-plaintext highlighter-rouge">Upcoming events</code> are shown in this section. Users can <strong>view</strong> which events will be held in the near future.</p> <h4 id="admins">Admins</h4> <p>This section shows all the <strong>admins</strong> that manage different features of the website.</p> <hr/> <h2 id="events-1">Events</h2> <p>This section includes</p> <h3 id="categories">Categories</h3> <p>Events are divided into 3 different parts and are shwon in sequence according to the parts as</p> <ul> <li>Upcoming</li> <li>Current</li> <li>Past</li> </ul> <h3 id="event-details">Event Details</h3> <p>User can view details of a particular event by clicking on read more button on event card.</p> <h4 id="single-event">Single Event</h4> <p>All information of a particular event is shown in this page like:</p> <ul> <li>Name</li> <li>A button for users to book number of seats(in case of upcoming or non-booked events)</li> <li>Description</li> <li>Event date</li> <li>Location</li> <li>Images(in case of past event)</li> <li>Comments(in case of past events)</li> </ul> <hr/> <h2 id="contact-us">Contact Us</h2> <p>This page shows basic info of company like</p> <ul> <li>Phone</li> <li>Email</li> <li>Location</li> <li>A form through which anyone can ask their queries</li> <li>Various Social media links to stay up-to-date</li> </ul> <h3 id="contact-us-form">Contact Us Form</h3> <p>user needs to fill this form when he/she has any queries to be answered. This form is incorporates with recaptcha to refrained from any spam.</p> <h3 id="faq">FAQ</h3> <p>This section shows some questions that are frequently asked by users and answers to those questions. It also has a <code class="language-plaintext highlighter-rouge">contact us</code> form.</p> <hr/>]]></content><author><name>Usman Jamil Bhatti</name></author><category term="Krazzy"/><category term="booking"/><summary type="html"><![CDATA[A booking website where users can book to participate in different events.]]></summary></entry></feed>